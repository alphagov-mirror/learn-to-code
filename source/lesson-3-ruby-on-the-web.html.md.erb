---
title: "Lesson 3: Ruby on the Web"
weight: 50
---

# Lesson 3: Ruby on the Web

## Introduction

### Objectives

In this tutorial we are going to look at:

* using `require` to access other Ruby modules
* using Ruby's `Date` type
* what HTTP is and how it works
* using Google Chrome's Developer tools to inspect HTTP requests
* building a web server with Ruby
* templating HTML
* introducing web security

### Goal

By the end of this tutorial you will have built [this web application](https://apply-for-a-barking-permit.london.cloudapps.digital/):

<a href="https://apply-for-a-barking-permit.london.cloudapps.digital/">
<img src="images/lesson-3/finished-application.png" alt="Apply for a Barking Permit website, showing the form from lesson 1 and the confirmation page">
</a>

You'll have a basic understanding of how web applications work, and a good foundation to build on.

### Using `require` to access other Ruby modules

In lesson 2 we used a number of built-in Ruby methods, like `rand()` (to get
a random number), `.reverse()` (to reverse a string), `gets()` and
`puts()` to read and write strings from the command line.

These methods are so useful that they live in the core of Ruby, so you can
always call them.

Some bits of Ruby are used less often, and these are not included by default.
To use these other bits you need to `require` them. For example, the `'date'`
module lets you work with dates and times, but it isn't included by default.

Running `require 'date'` includes the date code so you can use it in your
script. For example:

```
irb(main):001:0> require 'date'
=> true
irb(main):002:0> Date.today()
=> #<Date: 2019-05-30 ((2458633j,0s,0n),+0s,2299161j)>
```

### Working with Dates in Ruby

Ruby's date type makes doing things like adding days to a date much easier
(if you didn't have a date type you'd need to worry about how many days there
are in a month and so on).

```
irb(main):003:0> one_thousand_days_in_the_future = Date.today() + 1000
=> #<Date: 2022-02-23 ((2459633j,0s,0n),+0s,2299161j)>
```

The `.today()` method gets today's date, but you can also create dates for
other days using `.new()`:

```
irb(main):004:0> Date.new(2022, 2, 23)
=> #<Date: 2022-02-23 ((2459633j,0s,0n),+0s,2299161j)>
```

Because different cultures represent dates in different ways (e.g. Japan use
2019-05-30, the USA use 05/30/2019 and the UK use 30/05/2019), there's a
special method for formatting dates as strings called `.strftime()`. It takes
a "format" string as an argument specifying how to show the date:

```
irb(main):005:0> japan_format = Date.today().strftime("%Y-%m-%d")
=> "2019-05-30"
irb(main):006:0> usa_format = Date.today().strftime("%m/%d/%Y")
=> "05/30/2019"
irb(main):007:0> uk_format = Date.today().strftime("%d/%m/%Y")
=> "30/05/2019"
```

There are lots of placeholders you can use in your date string, including:

* `%Y` - the year as a 4 digit number
* `%m` - the month as a 2 digit number
* `%d` - the day as a 2 digit number
* `%A` - the day of the week as a word (e.g. Thursday)

#### Task 1: What day were you born on?

Using `irb` and the `Date` type, work out what day of the week you were born on.

<details>
<summary>Answer</summary>

```
irb(main):001:0> require 'date'
=> true

irb(main):002:0> birthday = Date.new(1988, 1, 20)
=> #<Date: 1988-01-20 ((2447181j,0s,0n),+0s,2299161j)>

irb(main):003:0> birthday.strftime("%A")
=> "Wednesday"
```

</details>

## Introduction to HTTP

### What is HTTP?

HTTP stands for <strong>H</strong>yper<strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol.

HTTP describes the format of the communications between your web browser and
a "web server" (which is just a kind of computer).

Your browser sends **HTTP requests** and the server responds with **HTTP responses**.

For example, when you visit `www.gov.uk` your browser will send a request a like this:

```http
GET / HTTP/1.1
Host: www.gov.uk
```

And GOV.UK's server will respond with something like:

```
HTTP/1.1 200 OK
Date: Wed, 29 May 2019 12:08:17 GMT
Content-Type: text/html; charset=UTF-8
Content-Length: 32897

<!doctype html>
<html>
... snip ...
</html>
```

In this case the response contains the HTML of the GOV.UK homepage.

### Viewing HTTP requests using browser developer tools

Modern browsers come with built in tools that let you see what's happening
under the hood. In Google Chrome on a Mac you can bring these up for any
webpage by pressing Command + Option + I (`⌘ + ⌥ + I`).

![Screenshot showing the Google Chrome developer tools on www.gov.uk](/images/lesson-3/developer-tools.png)

The Network tab shows you the requests and responses your browser is sending and receiving.

#### Task 2: Use the developer tools to look at an HTTP request

Go to any website you like and use the developer tools to look at the first
HTTP request it makes.

<details>
<summary>Answer (screenshots)</summary>

![Screenshot showing the Google Chrome developer tools network tab](/images/lesson-3/developer-tools-network.png)
![Screenshot showing the Google Chrome developer tools focused on a particular request](/images/lesson-3/developer-tools-network-focused.png)

</summary>

### Further reading
